security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    # Utilisé pour hash le mot de passe
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        Sonata\UserBundle\Model\UserInterface: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    # Provider = l'entité utilisé pour se connecter (Client)
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Client
                property: email
        sonata_user_bundle:
            id: sonata.user.security.user_provider

    enable_authenticator_manager: true

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            lazy: true
            pattern: /admin(.*)
            provider: sonata_user_bundle
            context: user
            switch_user: true
            form_login:
                login_path: sonata_user_admin_security_login
                check_path: sonata_user_admin_security_check
                default_target_path: sonata_admin_dashboard
            logout:
                path: sonata_user_admin_security_logout
                target: sonata_user_admin_security_login
            remember_me:
                secret: '%env(APP_SECRET)%'
                lifetime: 2629746
                path: /admin
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                # "app_login" est le nom de la route dans le controller Security

                # login_path est la route où l'utilisateur est redirigé s'il tente d'accéder à une page protégée
                login_path: app_login
                # check_path est un firewall qui récupère les requêtes HTTP POST et qui procède à l'authentification
                check_path: app_login
                # Vérifie que les donnée sont reçues par un formulaire
                form_only: true
                # protège le formulaire contre les attaques CSRF (une attaque qui transmet à un utilisateur authentifié une requête HTTP falsifiée)
                enable_csrf: true
                # la route utilisée si aucune route précédente est trouvée
                default_target_path: app_home
                # HTTP_REFERER = entête http qui stocke l'url précédente de l'utilisateur
                use_referer: true
            logout:
                path: app_logout
                target: app_home
            # sert à limiter les tentatives de connexions, ici 3 tentatives possibles toutes les 5 minutes
            login_throttling:
                max_attempts: 3
                interval: '3 minutes'

    access_control:
        # Admin login page needs to be accessed without credential
        - { path: ^/admin/login$, role: PUBLIC_ACCESS }
        - { path: ^/admin/logout$, role: PUBLIC_ACCESS }
        - { path: ^/admin/login_check$, role: PUBLIC_ACCESS }
        - { path: ^/admin/request$, role: PUBLIC_ACCESS }
        - { path: ^/admin/check-email$, role: PUBLIC_ACCESS }
        - { path: ^/admin/reset/.*$, role: PUBLIC_ACCESS }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: ROLE_SONATA_USER_ADMIN_USER_ADMIN }
        - { path: ^/.*, role: PUBLIC_ACCESS }

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_SONATA_USER_ADMIN_USER_ADMIN]
